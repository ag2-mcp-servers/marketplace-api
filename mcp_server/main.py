# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:57:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    AcceptSellerLeadRequest,
    CreateSellerLeadRequest,
    OfferManagerPvtOffersGetResponse,
    ResendSellerLeadRequestRequest,
    SellerRegisterPvtSellersSellerIdCommissionsCategoriesPutRequest,
    SellerRegisterPvtSellersSellerIdPatchRequest,
    SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponse,
    SellerRegisterPvtSellersSellerIdSalesChannelMappingPutRequest,
    SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponse,
    UpsertSellerCommissionsRequest,
    UpsertSellerRequest,
)

app = MCPProxy(
    contact={},
    description="\r\nThe **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.  \r\n\r\n>⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.\r\n\r\n## Index\r\n\r\n### Notification\r\n\r\nEndpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.\r\n\r\n`POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)\r\n\r\n`POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)\r\n\r\n\r\n### Suggestions\r\n\r\n#### Get Suggestions\r\n\r\nSearch and filter all suggestions using specific criteria.\r\n\r\n`GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)\r\n\r\n`GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)\r\n\r\n\r\n#### Manage Suggestions\r\n\r\nSend or delete SKU suggestions from the seller to marketplace.\r\n\r\n`PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)\r\n\r\n`DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)\r\n\r\n\r\n#### Get Versions\r\n\r\nSearch and filter all versions of suggestions, using specific criteria.\r\n\r\n`GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)\r\n\r\n`GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)\r\n\r\n\r\n#### Match Received SKUs\r\n\r\nMatch SKU suggestions received in the marketplace.\r\n\r\n`PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)\r\n\r\n`PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)\r\n\r\n\r\n#### SKU Approval Settings\r\n\r\nAllows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.\r\n\r\n`GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)  \r\n\r\n`PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)  \r\n\r\n`GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)\r\n\r\n`PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)\r\n\r\n`GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)\r\n\r\n`PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)\r\n\r\n`PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)   \r\n\r\n\r\n### Matched Offers\r\n\r\nOffers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.\r\n\r\n`GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)\r\n\r\n`GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)  \r\n\r\n`GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)\r\n",
    title='Marketplace API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX Server URL.',
            'url': 'https://{accountName}.{environment}.com.br/api',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.post(
    '/notificator/{sellerId}/changenotification/{skuId}/inventory',
    description=""" This endpoint is used by *sellers* to notify marketplaces that the inventory level has changed for one of their SKUs. 

There is no request body in this call, indicating the new inventory level, for instance. It only notifies a specific marketplace (`accountName`) that a seller (`sellerId`) has changed the inventory level of an SKU (`skuId`). 

*Marketplaces* will then call the [fulfillment endpoint](https://developers.vtex.com/vtex-rest-api/reference/fulfillment-simulation) provided in the seller registration form to get the updated inventory  information. """,
    tags=['inventory_notifications'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def inventory_notification(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    seller_id: str = Path(..., alias='sellerId'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    Notify marketplace of inventory update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/notificator/{sellerId}/changenotification/{skuId}/price',
    description=""" This endpoint is used by *sellers* to notify marketplaces that the price has changed for one of their SKUs. 

There is no request body in this call, indicating the new price value, for instance. It only notifies a specific marketplace (`accountName`) that a seller (`sellerId`) has changed the price of an SKU (`skuId`). 

*Marketplaces* will then call the [fulfillment endpoint](https://developers.vtex.com/vtex-rest-api/reference/fulfillment-simulation) provided in the seller registration form to get the updated price information. """,
    tags=['inventory_notifications'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def price_notification(
    account_name: str = Query(..., alias='accountName'),
    content__type: str = Header(..., alias='Content-Type'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    seller_id: str = Path(..., alias='sellerId'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    Notify marketplace of price update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/offer-manager/pvt/offers',
    description=""" Offers are seller's products and SKUs that were sent to the marketplace, and already have their price and inventory level configured. 

 This endpoint retrieves the available offers in a marketplace. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace, and are currently in its catalog. 

It is possible to filter the search through the following parameters: 

- rows 
- sort 

- start 

- fq """,
    tags=['offers_retrieval'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getofferslist(
    sort: Optional[str] = None,
    rows: Optional[int] = 20,
    start: Optional[int] = 21,
    fq: Optional[str] = None,
    account_name: str = Query(..., alias='accountName'),
    content__type: str = Header(..., alias='Content-Type'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Matched Offers List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/offer-manager/pvt/product/{productId}',
    description=""" Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured. 

This endpoint retrieves the available offers for a speciic Product ID in the marketplace's catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog. 

The call returns a list of offers for that ID, that contain the following data: 

- Seller that sells the SKU 

- Correspondent SKU ID 

- SKU's price value 

- Inventory level 

- Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at. """,
    tags=['offers_retrieval'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_productoffers(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: str = Path(..., alias='productId'),
):
    """
    Get Matched Offer's Data by Product ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/offer-manager/pvt/product/{productId}/sku/{skuId}',
    description=""" Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured. 

This endpoint retrieves the available offers for a speciic SKU ID in the marketplace's catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog. 

The call returns a list of offers for that ID, that contain the following data: 

- Seller that sells the SKU 

- Correspondent SKU ID 

- SKU's price value 

- Inventory level 

- Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at. """,
    tags=['offers_retrieval'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_s_k_uoffers(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    product_id: str = Path(..., alias='productId'),
    sku_id: str = Path(..., alias='skuId'),
):
    """
    Get Matched Offer's Data by SKU ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/seller-leads',
    description=""" This call's response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information: 

- `id` 

- `createdAt` 

- `status` 

- `isConnected` 

- `sellerEmail` 

- `sellerName` 

- `salesChannel` 

- `email` """,
    tags=['seller_leads_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_seller_leads(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    offset: int = 0,
    limit: int = 15,
    is_connected: str = Query(..., alias='isConnected'),
    search: str = 'user email',
    status: str = 'invited',
    order_by: str = Query(..., alias='orderBy'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    List Seller Leads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/seller-register/pvt/seller-leads',
    description=""" This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation's link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store. 

The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace's VTEX Admin, on the Message Center section. """,
    tags=['seller_leads_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_seller_lead(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: CreateSellerLeadRequest = ...,
):
    """
    Invite Seller Lead
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/seller-register/pvt/seller-leads/{sellerLeadId}',
    description=""" This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation. """,
    tags=['seller_leads_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_seller_lead(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_lead_id: str = Path(..., alias='sellerLeadId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Delete Seller Lead
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/seller-leads/{sellerLeadId}',
    description=""" Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their `Seller Lead Id`. To know the chosen seller's `sellerLeadId`, marketplace operators can count on the *List Sellers* endpoint's response as well. Each seller listed includes the following information: 

- `id` 

- `createdAt` 

- `status` 

- `isConnected` 

- `sellerEmail` 

- `sellerName` 

- `salesChannel` 

- `email` """,
    tags=['seller_leads_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def retrieve_seller_lead(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_lead_id: str = Path(..., alias='sellerLeadId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Get Seller Lead's Data by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/seller-leads/{sellerLeadId}',
    description=""" This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process. 

Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward: 

 From `invite` > to `Accept` > closing on `Create Seller`.  

If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint. """,
    tags=['seller_leads_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def accept_seller_lead(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_lead_id: str = Path(..., alias='sellerLeadId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: AcceptSellerLeadRequest = ...,
):
    """
    Accept Seller Lead
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/seller-leads/{sellerLeadId}/seller',
    description=""" This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is `accepted`. If they are already `connected` or `invited`, the call will not be fulfilled. 

The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step. 

Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward: 

 From `invite` > to `Accept` > closing on `Create Seller`.  

If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint. """,
    tags=['seller_leads_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_seller_from_seller_lead(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    is_active: bool = Query(..., alias='isActive'),
    seller_lead_id: str = Path(..., alias='sellerLeadId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Create Seller From Lead
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/seller-leads/{sellerLeadId}/status',
    description=""" This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is `invited`. If they are already `connected` or `accepted`, the call will not be fulfilled. """,
    tags=['seller_leads_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def resend_seller_lead_request(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_lead_id: str = Path(..., alias='sellerLeadId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: ResendSellerLeadRequestRequest = ...,
):
    """
    Resend Seller Lead Invite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/sellers',
    description=""" This endpoint lists all Sellers. This call's results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the `sc` query param. """,
    tags=['seller_account_management', 'seller_leads_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_list_sellers(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    from_: Optional[float] = Query(0, alias='from'),
    to: Optional[float] = 100,
    keyword: Optional[str] = 'keyword',
    integration: Optional[str] = 'vtex-seller',
    group_: Optional[str] = Query('Group', alias='group '),
    is_active: Optional[bool] = Query(False, alias='isActive'),
    is_better_scope: Optional[bool] = Query(False, alias='isBetterScope'),
    is_vtex: Optional[bool] = Query(False, alias='isVtex'),
    sc: Optional[str] = '1',
    seller_type: Optional[int] = Query(1, alias='sellerType'),
    sort: Optional[str] = 'id:asc',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    List Sellers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/seller-register/pvt/sellers',
    description=""" This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces. 

For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly. 

This call includes all the information a seller needs to activate their account. """,
    tags=['seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def upsert_seller_request(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: UpsertSellerRequest = ...,
):
    """
    Configure Seller Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/sellers/{sellerId}',
    description=""" Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the `sc` query param. """,
    tags=['seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_retrieve_seller(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    sc: Optional[str] = '1',
    seller_id: str = Path(..., alias='sellerId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Get Seller data by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/seller-register/pvt/sellers/{sellerId}',
    description=""" This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path's value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update. """,
    tags=['seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_seller(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    seller_id: str = Path(..., alias='sellerId'),
    body: SellerRegisterPvtSellersSellerIdPatchRequest = None,
):
    """
    Update Seller by Seller ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/sellers/{sellerId}/commissions',
    description=""" This endpoint retrieves all comissions configured for a specific seller. """,
    tags=['seller_commissions_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_seller_commissions(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_id: str = Path(..., alias='sellerId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    List Seller Commissions by seller ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/sellers/{sellerId}/commissions/categories',
    description=""" This endpoint is used by marketplace operators to define comissions for multiple categories. """,
    tags=['seller_commissions_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def bulk_upsert_seller_commissions(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    seller_id: str = Path(..., alias='sellerId'),
    body: SellerRegisterPvtSellersSellerIdCommissionsCategoriesPutRequest = ...,
):
    """
    Upsert Seller Commissions in Bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}',
    description=""" This endpoint removes a seller comission on the selected category. """,
    tags=['seller_commissions_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def remove_seller_commissions(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    seller_id: str = Path(..., alias='sellerId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Remove Seller Commissions by Category ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}',
    description=""" This endpoint retrieves seller comissions applied to the selected category. """,
    tags=['seller_commissions_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def retrieve_seller_commissions(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    seller_id: str = Path(..., alias='sellerId'),
    category_id: str = Path(..., alias='categoryId'),
):
    """
    Get Seller Commissions by Category ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}',
    description=""" This endpoint is used by marketplace operators to define comissions for a single category, by ID. """,
    tags=['seller_commissions_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def upsert_seller_commissions(
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    seller_id: str = Path(..., alias='sellerId'),
    category_id: str = Path(..., alias='categoryId'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: UpsertSellerCommissionsRequest = ...,
):
    """
    Upsert Seller Commissions by Category ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/seller-register/pvt/sellers/{sellerId}/sales-channel/mapping',
    description=""" Retrieves information about the mapping between marketplace's sales channels and a specific seller. """,
    tags=['sales_channel_operations'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def retrieve_mapping(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    an: str = 'apiexamples',
    seller_id: str = Path(..., alias='sellerId'),
):
    """
    Get Sales Channel Mapping Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/seller-register/pvt/sellers/{sellerId}/sales-channel/mapping',
    description=""" This endpoint allows the marketplace to map its sales channels with a seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187). The seller can have multiple sales channels associated with the same marketplace, by creating different affiliates. The mapping enables the seller to segment catalog, prices, inventory, logistics, and payments in the marketplace. """,
    tags=['sales_channel_operations', 'seller_account_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def upsert_mapping(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    account_name: str = Query(..., alias='accountName'),
    environment: str = 'vtexcommercestable',
    an: str = 'apiexamples',
    seller_id: str = Path(..., alias='sellerId'),
    body: SellerRegisterPvtSellersSellerIdSalesChannelMappingPutRequest = ...,
):
    """
    Upsert Sales Channel Mapping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
