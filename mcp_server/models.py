# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:57:39+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AvailableSalesChannel(BaseModel):
    id: int = Field(..., description="Sales Channel's ID.")
    isSelected: bool = Field(
        ...,
        description='Flag defining if the sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) is selected or not.',
    )
    name: str = Field(..., description='Name of the Sales Channel.')


class BulkUpsertSellerCommissionsRequest(BaseModel):
    categoryFullPath: str = Field(
        ...,
        description="Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.",
    )
    categoryId: str = Field(
        ...,
        description="Marketplace's Category ID that the product belongs to, configured in the Catalog.",
    )
    freightCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the freight in decimals.',
    )
    productCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the product in decimals.',
    )


class Groups(BaseModel):
    id: Optional[str] = Field(
        '8d845239bf1448dc8bc3ed3121837511',
        description="Group's unique identifier code.",
    )
    name: Optional[str] = Field(
        'franchise Accounts',
        description='Name of the tag chosen to identify the group.',
    )


class MainImage(BaseModel):
    ImageId: str = Field(..., description="Code identifying the image's file.")
    ImageLabel: str = Field(..., description="Image's label.")
    ImagePath: str = Field(..., description="Path for the image's file.")
    ImageTag: str = Field(..., description='HTML tag for the selected image.')
    ImageText: str = Field(..., description='Alt text for the image.')
    IsMain: bool = Field(..., description='Whether the image is the main one or not.')
    IsZoomSize: bool = Field(..., description='If zoom can be applied to the image.')
    LastModified: str = Field(
        ..., description='Date of the last changed made to the offer.'
    )


class OffersPerSalesChannel(BaseModel):
    AvailableQuantity: int = Field(..., description='Available SKU stock quantity')
    ListPrice: int = Field(..., description="SKU's suggested selling price")
    Price: int = Field(..., description="SKU's price.")
    PriceWithoutDiscount: int = Field(
        ..., description="SKU's price without discount applied."
    )
    SaleChannel: int = Field(
        ...,
        description='The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) of the SKU.',
    )


class ResendSellerLeadRequestRequest(BaseModel):
    status: str = Field(
        ...,
        description="Seller Lead's status. Includes `accepted`, `connected` or `invited`.",
    )


class SellerCommissionConfiguration(BaseModel):
    categoriesCommissionConfiguration: List[str] = Field(
        ...,
        description='Array with percentage of the comission applied to categories in decimals.',
    )
    freightCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the freight in decimals.',
    )
    productCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the product in decimals.',
    )


class MainImage1(BaseModel):
    pass


class UpsertMappingRequest(BaseModel):
    marketplaceSalesChannel: int = Field(
        ...,
        description="Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).",
    )
    sellerChannel: str = Field(
        ...,
        description="Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.",
    )


class UpsertSellerCommissionsRequest(BaseModel):
    categoryFullPath: str = Field(
        ...,
        description="Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.",
    )
    categoryId: str = Field(
        ...,
        description="Marketplace's Category ID that the product belongs to, configured in the Catalog.",
    )
    freightCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the freight in decimals.',
    )
    productCommissionPercentage: float = Field(
        ...,
        description='Percentage of the comission applied to the product in decimals.',
    )


class SellerCommissionConfiguration1(BaseModel):
    pass


class UpsertSellerRequest(BaseModel):
    CSCIdentification: str = Field(..., description='SKU Seller Identification')
    account: str = Field(..., description="Seller's account name")
    allowHybridPayments: bool = Field(
        ...,
        description='Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.',
    )
    availableSalesChannels: List[AvailableSalesChannel] = Field(
        ...,
        description='Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.',
    )
    catalogSystemEndpoint: str = Field(
        ...,
        description="URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`",
        title='Catalog System Endpoint schema',
    )
    channel: str = Field(..., description="Channel's name.")
    deliveryPolicy: str = Field(
        ...,
        description='Text describing the delivery policy previously agreed between the marketplace and the seller.',
    )
    description: str = Field(..., description='String describing the seller')
    email: str = Field(
        ..., description='email of the admin responsible for the seller.'
    )
    exchangeReturnPolicy: str = Field(
        ...,
        description='Text describing the exchange and return policy previously agreed between the marketplace and the seller.',
    )
    fulfillmentEndpoint: str = Field(
        ...,
        description="URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller. \n\nFor **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process. \n\nFor **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`. \n\nThe value `SellerName` corresponds to the store name if the seller is a VTEX store. \n\nThe value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process. \n\nThe value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process. \n\nTo configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`",
    )
    fulfillmentSellerId: str = Field(
        ...,
        description=' Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.',
    )
    groups: Optional[List[Groups]] = Field(
        None,
        description='Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.',
    )
    id: str = Field(
        ...,
        description="Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.",
    )
    isActive: bool = Field(
        ..., description='Whether the seller is active on the marketplace or not.'
    )
    isBetterScope: bool = Field(
        ...,
        description='Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.',
    )
    isVtex: bool = Field(
        ...,
        description='Flag determining whether the seller configured is a VTEX store or not.',
    )
    name: str = Field(
        ...,
        description="Name of the seller's store, configured in the seller's environment.",
    )
    password: str = Field(
        ...,
        description='User password, if you are using a hub to integrate with the external seller.',
        title='password',
    )
    salesChannel: str = Field(
        ...,
        description="Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.",
    )
    score: float = Field(
        ..., description='Score attributed to this seller.', title='Score'
    )
    securityPrivacyPolicy: str = Field(
        ...,
        description=' Text describing the security policy previously agreed between the marketplace and the seller.',
    )
    sellerCommissionConfiguration: Union[
        List[SellerCommissionConfiguration], SellerCommissionConfiguration1
    ]
    sellerType: int = Field(
        ...,
        description='Type of seller, including: \n\n`1`: regular seller \n\n`2`: whitelabel seller',
    )
    taxCode: str = Field(
        ...,
        description='This code is the Identity Number for the legal entity and is linked to information in its base country.',
    )
    trustPolicy: str = Field(
        ...,
        description=" the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field",
        title='Trust Policy',
    )
    user: str = Field(
        ...,
        description='Username, if you are using a hub to integrate with the external seller.',
        title='user',
    )


class Accountable(BaseModel):
    email: str = Field(
        ...,
        description='Email address of the person responsible for the seller.',
        title='email',
    )
    name: str = Field(
        ..., description='Name of the person responsible for the seller.', title='name'
    )
    phone: str = Field(
        ...,
        description='Phone number of the person responsible for the seller.',
        title='phone',
    )


class Address(BaseModel):
    city: str = Field(
        ..., description="City name, from the seller's address.", title='city'
    )
    complement: str = Field(
        ..., description="Seller's address complement.", title='complement'
    )
    neighborhood: str = Field(
        ...,
        description="Seller's address neighborhood.",
        title='The neighborhood schema',
    )
    number: str = Field(
        ..., description="Street's number, from the seller's address.", title='number'
    )
    postalcode: str = Field(
        ..., description="Postal code from the seller's address.", title='postalCode'
    )
    state: str = Field(
        ..., description="State, from the seller's address.", title='state'
    )
    street: str = Field(
        ...,
        description="Street information, from the seller's address.",
        title='street',
    )


class SellerRegisterPvtSellersSellerIdPatchRequestItem(BaseModel):
    operation: str = Field(
        ...,
        description='The action being performed, which is always going to be `replace`.',
    )
    path: str = Field(
        ...,
        description="The path in which the value is being updated. It follows the standardized format `/{field}`, where `{field}` is the path's name.",
    )
    value: bool = Field(
        ...,
        description='The value that is being updated. Notice that the type will depend on the path that is being updated.',
    )


class SellerRegisterPvtSellersSellerIdPatchRequest(
    RootModel[List[SellerRegisterPvtSellersSellerIdPatchRequestItem]]
):
    root: List[SellerRegisterPvtSellersSellerIdPatchRequestItem] = Field(
        ..., description='array of objects', title='Request body'
    )


class SellerRegisterPvtSellersSellerIdCommissionsCategoriesPutRequest(
    RootModel[List[BulkUpsertSellerCommissionsRequest]]
):
    root: List[BulkUpsertSellerCommissionsRequest] = Field(
        ...,
        description='',
        examples=[
            [
                {
                    'categoryFullPath': None,
                    'categoryId': '6',
                    'freightCommissionPercentage': 2.43,
                    'productCommissionPercentage': 9.85,
                }
            ]
        ],
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponseItem(BaseModel):
    marketplaceSalesChannel: Optional[str] = Field(
        '1',
        description="Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).",
    )
    sellerChannel: Optional[str] = Field(
        'GCB',
        description="Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.",
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponse1(BaseModel):
    marketplaceSalesChannel: Optional[int] = Field(
        1,
        description="Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).",
    )
    sellerChannel: Optional[str] = Field(
        'GCB',
        description="Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.",
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponse(
    RootModel[
        Union[
            List[SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponseItem],
            SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponse1,
        ]
    ]
):
    root: Union[
        List[SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponseItem],
        SellerRegisterPvtSellersSellerIdSalesChannelMappingGetResponse1,
    ] = Field(
        ...,
        examples=[[{'marketplaceSalesChannel': '1', 'sellerChannel': 'GCC'}]],
        title='UpsertMapping',
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingPutRequest(
    RootModel[List[UpsertMappingRequest]]
):
    root: List[UpsertMappingRequest] = Field(
        ...,
        examples=[
            [
                {'marketplaceSalesChannel': 1, 'sellerChannel': 'GCB'},
                {'marketplaceSalesChannel': 2, 'sellerChannel': 'GCB'},
            ]
        ],
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponseItem(BaseModel):
    marketplaceSalesChannel: Optional[str] = Field(
        '1',
        description="Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).",
    )
    sellerChannel: Optional[str] = Field(
        'GCB',
        description="Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.",
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponse1(BaseModel):
    marketplaceSalesChannel: Optional[int] = Field(
        1,
        description="Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).",
    )
    sellerChannel: Optional[str] = Field(
        'GCB',
        description="Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.",
    )


class SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponse(
    RootModel[
        Union[
            List[SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponseItem],
            SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponse1,
        ]
    ]
):
    root: Union[
        List[SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponseItem],
        SellerRegisterPvtSellersSellerIdSalesChannelMappingPutResponse1,
    ] = Field(
        ...,
        examples=[[{'marketplaceSalesChannel': '1', 'sellerChannel': 'GCC'}]],
        title='UpsertMapping',
    )


class AcceptSellerLeadRequest(BaseModel):
    accountId: str = Field(..., description="Marketplace's account ID")
    accountable: Accountable
    address: Address
    document: str = Field(..., description="Company's legal document code.")
    email: str = Field(
        ..., description='email of the admin responsible for the seller.'
    )
    hasAcceptedLegalTerms: bool = Field(
        ...,
        description="Indicates if the seller has accepted the platform's legal terms and conditions.",
    )
    salesChannel: str = Field(
        ...,
        description='Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.',
    )
    sellerAccountName: str = Field(
        ...,
        description="Name of the seller's account, part of the url of their VTEX Admin.",
    )
    sellerEmail: str = Field(..., description="Seller's contact email.")
    sellerName: str = Field(..., description="Seller's store's name.")
    sellerType: int = Field(
        ...,
        description='Type of seller, including: \n\n`1`: regular seller \n\n`2`: whitelabel seller',
    )


class CreateSellerLeadRequest(BaseModel):
    accountId: str = Field(..., description="Marketplace's account ID")
    accountable: Accountable
    address: Address
    document: str = Field(..., description="Company's legal document code.")
    email: str
    hasAcceptedLegalTerms: bool = Field(
        ...,
        description="Indicates if the seller has accepted the platform's legal terms and conditions.",
    )
    salesChannel: str = Field(
        ...,
        description='Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.',
    )
    sellerAccountName: str = Field(
        ...,
        description="Name of the seller's account, part of the url of their VTEX Admin.",
    )
    sellerEmail: str = Field(..., description="Seller's contact email;")
    sellerName: str = Field(..., description="Seller's store's name.")
    sellerType: int = Field(
        ...,
        description='Type of seller, including: \n\n`1`: regular seller \n\n`2`: whitelabel seller',
    )


class Offer(BaseModel):
    AvailableSalesChannels: str = Field(
        ...,
        description='The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) ID in which the SKU is available.',
    )
    OffersPerSalesChannel_1: List[OffersPerSalesChannel] = Field(
        ..., alias='OffersPerSalesChannel', description=''
    )
    SellerId: str = Field(
        ...,
        description='ID of the seller in the marketplace. This ID must be created by the marketplace.',
    )
    SellerSkuId: str = Field(
        ...,
        description='A string that identifies the SKU in the seller. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications.',
    )


class Sku2(BaseModel):
    EanId: str = Field(..., description="EAN's unique identifier number")
    IsActive: bool = Field(
        ...,
        description='Whether the SKU is active in the sales channel (true), or not (false).',
    )
    MainImage_1: Union[List[MainImage], MainImage1] = Field(
        ..., alias='MainImage', description="Main image's information."
    )
    Name: str = Field(..., description='Summarized name of the SKU')
    NameComplete: str = Field(..., description='Complete name of the SKU')
    Offers: List[Offer] = Field(..., description='Array with offers')
    RefId: str = Field(..., description="SKU's Reference ID")
    SkuId: str = Field(..., description="SKU's unique identifier number")


class OfferManagerPvtOffersGetResponseItem(BaseModel):
    BrandId: int = Field(
        ...,
        description="Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.",
    )
    CategoryId: int = Field(
        ...,
        description="Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.",
    )
    LastModified: str = Field(..., description='Last date the offer was modified.')
    ProductId: str = Field(
        ...,
        description="A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.",
    )
    ProductName: str = Field(..., description="Name of the offer's product.")
    Skus: List[Sku2] = Field(..., description='Array of SKUs in the offer.')


class OfferManagerPvtOffersGetResponse(
    RootModel[List[OfferManagerPvtOffersGetResponseItem]]
):
    root: List[OfferManagerPvtOffersGetResponseItem]
